<job>
	<script src="src/iof.js" language="JScript"></script>
	<script src="src/json.js" language="JScript"></script>
	<script src="config.js" language="JScript"></script>
	<script language="JScript">
		var wshShell = WScript.CreateObject("WScript.Shell");
		wshShell.currentDirectory = '.';
		var btn = wshShell.Popup("build?", 60, "", 0x4 + 0x20);
		if (btn != 6)
			WScript.Quit();

		var buildVersion = JSON.parse(readFile('package.json')).version;
		var a_js = ['common.js', 'createLexer.js', 'lexer.js', 'parser.js', 'codegen_common.js', 'codegen_js.js', 'crox_js.js'];
		var out_js = ['crox.js', 'crox-min.js'];

		var a_all_js = a_js.concat('codegen_php.js', 'codegen_vm.js', 'crox_extra.js');
		var out_all_js = ['crox-all.js', 'crox-all-min.js'];

		var a2_js = ['common.js', 'createLexer.js', 'lexer.js', 'parser2.js', 'codeg2.js', 'crox_js2.js'];
		var out2_js = ['crox2.js', 'crox2-min.js'];

		function md5xor(a, b) {
			if (a && b) {
				var c = '';
				for (var i = 0; i < 32; ++i)
					c += (parseInt(a.charAt(i), 16) ^ parseInt(b.charAt(i), 16)).toString(16);
				return c;
			}
			else {
				return a || b;
			}
		}
		function comb(a) {
			var t = comb2(a);
			return {
				s: 'var Crox = (function() {\r\n'
					+ t.s
					+ 'Crox.version = "' + buildVersion + '";'
					+ 'return Crox;'
					+ '})();',
				md5: t.md5
			};
		}
		function comb2(a) {
			var md5 = '';
			var s = '';
			for (var i = 0; i < a.length; ++i) {
				s += readFile('src/' + a[i]) + '\r\n';
				md5 = md5xor(md5, calcMd5('src/' + a[i]));
			}
			return { s: s, md5: md5 };
		}

		function build(s, md5, out) {
			var outfile = 'build/' + out[0];
			var outfilemin = 'build/' + out[1];
			var copy = '/**\r\n\
 * @preserve Crox v' + buildVersion + '\r\n\
 * https://github.com/thx/crox\r\n\
 *\r\n\
 * Released under the MIT license\r\n\
 * md5: ' + md5 + '\r\n\
 */\r\n';
			saveFile(outfile, copy + s);
			var tempFile = gccPath + "temp.js";

			function gcc(jspath, outName) {
				var oExec = wshShell.Exec("java -jar " + gccPath + " --js=" + jspath + ' --js_output_file=' + outName);
				while (oExec.Status == 0)
					WScript.Sleep(100);
			}
			gcc(outfile, outfilemin);
		}

		function calcMd5(fpath) {
			var t = wshShell.Exec(fcivPath + ' ' + fpath);
			t = t.StdOut.ReadAll();
			return /\w{32}/.exec(t)[0];
		}

		var theDate = new Date;
		var sDate = theDate.getFullYear() + '-' + (theDate.getMonth() + 1) + '-' + theDate.getDate() + ' ' + theDate.getHours() + ':' + theDate.getMinutes() + ':' + theDate.getSeconds();
		sDate = theDate.toUTCString();

		var jscode = comb(a_js);
		function wrap(s) {
			return '(function(root) {' + s + '\
if ( typeof module == "object" && module && typeof module.exports == "object" ) module.exports = Crox;\
else if (typeof define == "function" && (define.amd || define.cmd) ) define(function () { return Crox; } );\
else if (typeof KISSY != "undefined") KISSY.add(function(){ return Crox; });\
if (root) root.Crox = Crox; })(this);';
		}

		build(wrap(jscode.s), jscode.md5, out_js);
		var allcode = comb(a_all_js);
		build(wrap(allcode.s), allcode.md5, out_all_js);
		var jscode2 = comb2(a2_js);
		build('KISSY.add("crox", function(){' + jscode2.s + 'return Crox;});', jscode2.md5, out2_js);

		WScript.Echo('done!');

	</script>
</job>
